'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ImageHelper = require('./ImageHelper');

var _ImageHelper2 = _interopRequireDefault(_ImageHelper);

var Preload = (function (_React$Component) {
    _inherits(Preload, _React$Component);

    function Preload(props) {
        _classCallCheck(this, Preload);

        _get(Object.getPrototypeOf(Preload.prototype), 'constructor', this).call(this, props);

        this.state = {
            ready: false
        };
    }

    _createClass(Preload, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            if (!this.props.images || this.props.images.length === 0) {
                this._handleSuccess();
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (!this.state.ready) {
                _ImageHelper2['default'].loadImages(this.props.images).then(this._handleSuccess, this._handleError);

                if (this.props.autoResolveDelay && this.props.autoResolveDelay > 0) {
                    this.autoResolveTimeout = setTimeout(this._handleSuccess, this.props.autoResolveDelay);
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            clearTimeout(this.autoResolveTimeout);
        }
    }, {
        key: '_handleSuccess',
        value: function _handleSuccess() {
            clearTimeout(this.autoResolveTimeout);

            if (this.state.ready) {
                return;
            }

            this.setState({
                ready: true
            });

            if (this.props.onSuccess) {
                this.props.onSuccess();
            }
        }
    }, {
        key: '_handleError',
        value: function _handleError(err) {
            if (this.props.resolveOnError) {
                this._handleSuccess();
            }

            if (this.props.onError) {
                this.props.onError(err);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return this.state.ready && this.props.mountChildren ? this.props.children : this.props.loadingIndicator;
        }
    }]);

    return Preload;
})(_react2['default'].Component);

Preload.propTypes = {
    //Rendered on success
    children: _react2['default'].PropTypes.node.isRequired,

    //Rendered during load
    loadingIndicator: _react2['default'].PropTypes.node.isRequired,

    //Array of image urls to be preloaded
    images: _react2['default'].PropTypes.array,

    //If set, the preloader will automatically show
    //the children content after this amount of time
    autoResolveDelay: _react2['default'].PropTypes.number,

    //Error callback. Is passed the error
    onError: _react2['default'].PropTypes.func,

    //Success callback
    onSuccess: _react2['default'].PropTypes.func,

    //Whether or not we should still show the content
    //even if there is a preloading error
    resolveOnError: _react2['default'].PropTypes.bool,

    //Whether or not we should mount the child content after
    //images have finished loading (or after autoResolveDelay)
    mountChildren: _react2['default'].PropTypes.bool
};

Preload.getDefaultProps = function () {
    return {
        images: [],
        resolveOnError: true,
        mountChildren: true
    };
};

exports['default'] = Preload;
module.exports = exports['default'];